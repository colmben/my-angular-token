{"version":3,"sources":["ng://angular-token/lib/angular-token.token.ts","ng://angular-token/lib/angular-token.service.ts","ng://angular-token/lib/angular-token.interceptor.ts","ng://angular-token/lib/angular-token.module.ts"],"names":["ANGULAR_TOKEN_OPTIONS","InjectionToken","AngularTokenService","http","config","platformId","activatedRoute","router","this","userType","BehaviorSubject","authData","userData","localStorage","global","window","isPlatformServer","open","location","href","origin","setItem","getItem","removeItem","defaultOptions","apiPath","apiBase","signInPath","signInRedirect","signInStoredUrlStorageKey","signOutPath","validateTokenPath","signOutFailedValidate","registerAccountPath","deleteAccountPath","registerAccountCallback","updatePasswordPath","resetPasswordPath","resetPasswordCallback","userTypes","loginField","oAuthBase","oAuthPaths","github","oAuthCallbackPath","oAuthWindowType","oAuthWindowOptions","oAuthBrowserCallbacks","mergedOptions","assign","options","console","warn","tryLoadAuthData","Object","defineProperty","prototype","value","name","undefined","userSignedIn","canActivate","route","state","url","navigate","registerAccount","registerData","additionalData","next","getUserTypeByName","password_confirmation","passwordConfirmation","login","confirm_success_url","post","getServerPath","deleteAccount","delete","signIn","signInData","_this","body","_a","password","observ","pipe","share","subscribe","res","data","signInOAuth","oAuthType","inAppBrowser","platform","oAuthPath","getOAuthPath","callbackUrl","authUrl","getOAuthUrl","is","oAuthBrowserCallback_1","Error","browser_1","create","Observable","observer","on","ev","indexOf","executeScript","code","then","credentials","getAuthDataFromPostMessage","pollerSubscription","interval","complete","unsubscribe","close","error","windowOptions","key","hasOwnProperty","popup","requestCredentialsViaPostMessage","processOAuthCallback","getAuthDataFromParams","signOut","finalize","validateToken","get","status","updatePassword","updatePasswordData","args","passwordCurrent","current_password","resetPasswordToken","put","resetPassword","resetPasswordData","redirect_url","getUserPath","path","getApiPath","constructedPath","windowType","encodeURIComponent","getAuthDataFromStorage","getAuthHeadersFromResponse","headers","accessToken","client","expiry","tokenType","uid","setAuthData","checkAuthData","queryParams","authWindow","pollerObserv","responseObserv","fromEvent","pluck","filter","oAuthWindowResponseFilter","bind","closed","postMessage","message","find","Injectable","providedIn","HttpClient","Inject","decorators","type","PLATFORM_ID","ActivatedRoute","Optional","Router","AngularTokenInterceptor","tokenService","intercept","req","tokenOptions","match","access-token","token-type","clone","setHeaders","handle","tap","handleResponse","err","HttpResponse","HttpErrorResponse","AngularTokenModule","parentModule","forRoot","ngModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","angularTokenOptionsProvider","useValue","NgModule","SkipSelf"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const ANGULAR_TOKEN_OPTIONS = new InjectionToken('ANGULAR_TOKEN_OPTIONS');\n","import { Injectable, Optional, Inject, PLATFORM_ID } from '@angular/core';\nimport { ActivatedRoute, Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { HttpClient, HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { isPlatformServer } from '@angular/common';\n\nimport { Observable, fromEvent, interval, BehaviorSubject } from 'rxjs';\nimport { pluck, filter, share, finalize } from 'rxjs/operators';\n\nimport { ANGULAR_TOKEN_OPTIONS } from './angular-token.token';\n\nimport {\n  SignInData,\n  RegisterData,\n  UpdatePasswordData,\n  ResetPasswordData,\n\n  UserType,\n  UserData,\n  AuthData,\n  ApiResponse,\n\n  AngularTokenOptions,\n\n  TokenPlatform,\n  TokenInAppBrowser,\n} from './angular-token.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AngularTokenService implements CanActivate {\n\n  get currentUserType(): string {\n    if (this.userType.value != null) {\n      return this.userType.value.name;\n    } else {\n      return undefined;\n    }\n  }\n\n  get currentUserData(): UserData {\n    return this.userData.value;\n  }\n\n  get currentAuthData(): AuthData {\n    return this.authData.value;\n  }\n\n  get apiBase(): string {\n    console.warn('[angular-token] The attribute .apiBase will be removed in the next major release, please use' +\n    '.tokenOptions.apiBase instead');\n    return this.options.apiBase;\n  }\n\n  get tokenOptions(): AngularTokenOptions {\n    return this.options;\n  }\n\n  set tokenOptions(options: AngularTokenOptions) {\n    this.options = (<any>Object).assign(this.options, options);\n  }\n\n  private options: AngularTokenOptions;\n  public userType: BehaviorSubject<UserType> = new BehaviorSubject<UserType>(null);\n  public authData: BehaviorSubject<AuthData> = new BehaviorSubject<AuthData>(null);\n  public userData: BehaviorSubject<UserData> = new BehaviorSubject<UserData>(null);\n  private global: Window | any;\n\n  private localStorage: Storage | any = {};\n\n  constructor(\n    private http: HttpClient,\n    @Inject(ANGULAR_TOKEN_OPTIONS) config: any,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Optional() private activatedRoute: ActivatedRoute,\n    @Optional() private router: Router\n  ) {\n    this.global = (typeof window !== 'undefined') ? window : {};\n\n    if (isPlatformServer(this.platformId)) {\n\n      // Bad pratice, needs fixing\n      this.global = {\n        open: (): void => null,\n        location: {\n          href: '/',\n          origin: '/'\n        }\n      };\n\n      // Bad pratice, needs fixing\n      this.localStorage.setItem = (): void => null;\n      this.localStorage.getItem = (): void => null;\n      this.localStorage.removeItem = (): void => null;\n    } else {\n      this.localStorage = localStorage;\n    }\n\n    const defaultOptions: AngularTokenOptions = {\n      apiPath:                    null,\n      apiBase:                    null,\n\n      signInPath:                 'auth/sign_in',\n      signInRedirect:             null,\n      signInStoredUrlStorageKey:  null,\n\n      signOutPath:                'auth/sign_out',\n      validateTokenPath:          'auth/validate_token',\n      signOutFailedValidate:      false,\n\n      registerAccountPath:        'auth',\n      deleteAccountPath:          'auth',\n      registerAccountCallback:    this.global.location.href,\n\n      updatePasswordPath:         'auth',\n\n      resetPasswordPath:          'auth/password',\n      resetPasswordCallback:      this.global.location.href,\n\n      userTypes:                  null,\n      loginField:                 'email',\n\n      oAuthBase:                  this.global.location.origin,\n      oAuthPaths: {\n        github:                   'auth/github'\n      },\n      oAuthCallbackPath:          'oauth_callback',\n      oAuthWindowType:            'newWindow',\n      oAuthWindowOptions:         null,\n\n      oAuthBrowserCallbacks: {\n        github:                   'auth/github/callback',\n      },\n    };\n\n    const mergedOptions = (<any>Object).assign(defaultOptions, config);\n    this.options = mergedOptions;\n\n    if (this.options.apiBase === null) {\n      console.warn(`[angular-token] You have not configured 'apiBase', which may result in security issues. ` +\n                   `Please refer to the documentation at https://github.com/neroniaky/angular-token/wiki`);\n    }\n\n    this.tryLoadAuthData();\n  }\n\n  userSignedIn(): boolean {\n    if (this.authData.value == null) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    if (this.userSignedIn()) {\n      return true;\n    } else {\n      // Store current location in storage (usefull for redirection after signing in)\n      if (this.options.signInStoredUrlStorageKey) {\n        this.localStorage.setItem(\n          this.options.signInStoredUrlStorageKey,\n          state.url\n        );\n      }\n\n      // Redirect user to sign in if signInRedirect is set\n      if (this.router && this.options.signInRedirect) {\n        this.router.navigate([this.options.signInRedirect]);\n      }\n\n      return false;\n    }\n  }\n\n\n  /**\n   *\n   * Actions\n   *\n   */\n\n  // Register request\n  registerAccount(registerData: RegisterData, additionalData?: any): Observable<ApiResponse> {\n\n    registerData = Object.assign({}, registerData);\n\n    if (registerData.userType == null) {\n      this.userType.next(null);\n    } else {\n      this.userType.next(this.getUserTypeByName(registerData.userType));\n      delete registerData.userType;\n    }\n\n    if (\n      registerData.password_confirmation == null &&\n      registerData.passwordConfirmation != null\n    ) {\n      registerData.password_confirmation = registerData.passwordConfirmation;\n      delete registerData.passwordConfirmation;\n    }\n\n    if (additionalData !== undefined) {\n      registerData.additionalData = additionalData;\n    }\n\n    const login = registerData.login;\n    delete registerData.login;\n    registerData[this.options.loginField] = login;\n\n    registerData.confirm_success_url = this.options.registerAccountCallback;\n\n    return this.http.post<ApiResponse>(\n      this.getServerPath() + this.options.registerAccountPath, registerData\n    );\n  }\n\n  // Delete Account\n  deleteAccount(): Observable<ApiResponse> {\n    return this.http.delete<ApiResponse>(this.getServerPath() + this.options.deleteAccountPath);\n  }\n\n  // Sign in request and set storage\n  signIn(signInData: SignInData, additionalData?: any): Observable<ApiResponse> {\n    this.userType.next((signInData.userType == null) ? null : this.getUserTypeByName(signInData.userType));\n\n    const body = {\n      [this.options.loginField]: signInData.login,\n      password: signInData.password\n    };\n\n    if (additionalData !== undefined) {\n      body.additionalData = additionalData;\n    }\n\n    const observ = this.http.post<ApiResponse>(\n      this.getServerPath() + this.options.signInPath, body\n    ).pipe(share());\n\n    observ.subscribe(res => this.userData.next(res.data));\n\n    return observ;\n  }\n\n  signInOAuth(oAuthType: string, inAppBrowser?: TokenInAppBrowser<any, any>, platform?: TokenPlatform) {\n\n    const oAuthPath: string = this.getOAuthPath(oAuthType);\n    const callbackUrl = `${this.global.location.origin}/${this.options.oAuthCallbackPath}`;\n    const oAuthWindowType: string = this.options.oAuthWindowType;\n    const authUrl: string = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);\n\n    if (oAuthWindowType === 'newWindow' ||\n      (oAuthWindowType == 'inAppBrowser' && (!platform || !platform.is('cordova') || !(platform.is('ios') || platform.is('android'))))) {\n      const oAuthWindowOptions = this.options.oAuthWindowOptions;\n      let windowOptions = '';\n\n      if (oAuthWindowOptions) {\n        for (const key in oAuthWindowOptions) {\n          if (oAuthWindowOptions.hasOwnProperty(key)) {\n              windowOptions += `,${key}=${oAuthWindowOptions[key]}`;\n          }\n        }\n      }\n\n      const popup = window.open(\n          authUrl,\n          '_blank',\n          `closebuttoncaption=Cancel${windowOptions}`\n      );\n      return this.requestCredentialsViaPostMessage(popup);\n    } else if (oAuthWindowType == 'inAppBrowser') {\n      let oAuthBrowserCallback = this.options.oAuthBrowserCallbacks[oAuthType];\n      if (!oAuthBrowserCallback) {\n        throw new Error(`To login with oAuth provider ${oAuthType} using inAppBrowser the callback (in oAuthBrowserCallbacks) is required.`);\n      }\n      // let oAuthWindowOptions = this.options.oAuthWindowOptions;\n      // let windowOptions = '';\n\n      //  if (oAuthWindowOptions) {\n      //     for (let key in oAuthWindowOptions) {\n      //         windowOptions += `,${key}=${oAuthWindowOptions[key]}`;\n      //     }\n      // }\n\n      let browser = inAppBrowser.create(\n          authUrl,\n          '_blank',\n          'location=no'\n      );\n\n      return new Observable((observer) => {\n        browser.on('loadstop').subscribe((ev: any) => {\n          if (ev.url.indexOf(oAuthBrowserCallback) > -1) {\n            browser.executeScript({code: \"requestCredentials();\"}).then((credentials: any) => {\n              this.getAuthDataFromPostMessage(credentials[0]);\n\n              let pollerObserv = interval(400);\n\n              let pollerSubscription = pollerObserv.subscribe(() => {\n                if (this.userSignedIn()) {\n                  observer.next(this.authData);\n                  observer.complete();\n\n                  pollerSubscription.unsubscribe();\n                  browser.close();\n                }\n              }, (error: any) => {\n                observer.error(error);\n                observer.complete();\n             });\n            }, (error: any) => {\n              observer.error(error);\n              observer.complete();\n           });\n          }\n        }, (error: any) => {\n          observer.error(error);\n          observer.complete();\n        });\n      })\n    } else if (oAuthWindowType === 'sameWindow') {\n      this.global.location.href = authUrl;\n      return undefined;\n    } else {\n      throw new Error(`Unsupported oAuthWindowType \"${oAuthWindowType}\"`);\n    }\n  }\n\n  processOAuthCallback(): void {\n    this.getAuthDataFromParams();\n  }\n\n  // Sign out request and delete storage\n  signOut(): Observable<ApiResponse> {\n    return this.http.delete<ApiResponse>(this.getServerPath() + this.options.signOutPath)\n      // Only remove the localStorage and clear the data after the call\n      .pipe(\n        finalize(() => {\n            this.localStorage.removeItem('accessToken');\n            this.localStorage.removeItem('client');\n            this.localStorage.removeItem('expiry');\n            this.localStorage.removeItem('tokenType');\n            this.localStorage.removeItem('uid');\n\n            this.authData.next(null);\n            this.userType.next(null);\n            this.userData.next(null);\n          }\n        )\n      );\n  }\n\n  // Validate token request\n  validateToken(): Observable<ApiResponse> {\n    const observ = this.http.get<ApiResponse>(\n      this.getServerPath() + this.options.validateTokenPath\n    ).pipe(share());\n\n    observ.subscribe(\n      (res) => this.userData.next(res.data),\n      (error) => {\n        if (error.status === 401 && this.options.signOutFailedValidate) {\n          this.signOut();\n        }\n    });\n\n    return observ;\n  }\n\n  // Update password request\n  updatePassword(updatePasswordData: UpdatePasswordData): Observable<ApiResponse> {\n\n    if (updatePasswordData.userType != null) {\n      this.userType.next(this.getUserTypeByName(updatePasswordData.userType));\n    }\n\n    let args: any;\n\n    if (updatePasswordData.passwordCurrent == null) {\n      args = {\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    } else {\n      args = {\n        current_password:       updatePasswordData.passwordCurrent,\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    }\n\n    if (updatePasswordData.resetPasswordToken) {\n      this.tryLoadAuthData();\n    }\n\n    const body = args;\n    return this.http.put<ApiResponse>(this.getServerPath() + this.options.updatePasswordPath, body);\n  }\n\n  // Reset password request\n  resetPassword(resetPasswordData: ResetPasswordData): Observable<ApiResponse> {\n\n    this.userType.next(\n      (resetPasswordData.userType == null) ? null : this.getUserTypeByName(resetPasswordData.userType)\n    );\n\n    const body = {\n      [this.options.loginField]: resetPasswordData.login,\n      redirect_url: this.options.resetPasswordCallback\n    };\n\n    return this.http.post<ApiResponse>(this.getServerPath() + this.options.resetPasswordPath, body);\n  }\n\n\n  /**\n   *\n   * Construct Paths / Urls\n   *\n   */\n\n  private getUserPath(): string {\n    return (this.userType.value == null) ? '' : this.userType.value.path + '/';\n  }\n\n  private getApiPath(): string {\n    let constructedPath = '';\n\n    if (this.options.apiBase != null) {\n      constructedPath += this.options.apiBase + '/';\n    }\n\n    if (this.options.apiPath != null) {\n      constructedPath += this.options.apiPath + '/';\n    }\n\n    return constructedPath;\n  }\n\n  private getServerPath(): string {\n    return this.getApiPath() + this.getUserPath();\n  }\n\n  private getOAuthPath(oAuthType: string): string {\n    let oAuthPath: string;\n\n    oAuthPath = this.options.oAuthPaths[oAuthType];\n\n    if (oAuthPath == null) {\n      oAuthPath = `/auth/${oAuthType}`;\n    }\n\n    return oAuthPath;\n  }\n\n  private getOAuthUrl(oAuthPath: string, callbackUrl: string, windowType: string): string {\n    let url: string;\n\n    url =   `${this.options.oAuthBase}/${oAuthPath}`;\n    url +=  `?omniauth_window_type=${windowType}`;\n    url +=  `&auth_origin_url=${encodeURIComponent(callbackUrl)}`;\n\n    if (this.userType.value != null) {\n      url += `&resource_class=${this.userType.value.name}`;\n    }\n\n    return url;\n  }\n\n\n  /**\n   *\n   * Get Auth Data\n   *\n   */\n\n  // Try to load auth data\n  private tryLoadAuthData(): void {\n\n    const userType = this.getUserTypeByName(this.localStorage.getItem('userType'));\n\n    if (userType) {\n      this.userType.next(userType);\n    }\n\n    this.getAuthDataFromStorage();\n\n    if (this.activatedRoute) {\n      this.getAuthDataFromParams();\n    }\n\n    // if (this.authData) {\n    //     this.validateToken();\n    // }\n  }\n\n  // Parse Auth data from response\n  public getAuthHeadersFromResponse(data: HttpResponse<any> | HttpErrorResponse): void {\n    const headers = data.headers;\n\n    const authData: AuthData = {\n      accessToken:    headers.get('access-token'),\n      client:         headers.get('client'),\n      expiry:         headers.get('expiry'),\n      tokenType:      headers.get('token-type'),\n      uid:            headers.get('uid')\n    };\n\n    this.setAuthData(authData);\n  }\n\n  // Parse Auth data from post message\n  private getAuthDataFromPostMessage(data: any): void {\n    const authData: AuthData = {\n      accessToken:    data['auth_token'],\n      client:         data['client_id'],\n      expiry:         data['expiry'],\n      tokenType:      'Bearer',\n      uid:            data['uid']\n    };\n\n    this.setAuthData(authData);\n  }\n\n  // Try to get auth data from storage.\n  public getAuthDataFromStorage(): void {\n\n    const authData: AuthData = {\n      accessToken:    this.localStorage.getItem('accessToken'),\n      client:         this.localStorage.getItem('client'),\n      expiry:         this.localStorage.getItem('expiry'),\n      tokenType:      this.localStorage.getItem('tokenType'),\n      uid:            this.localStorage.getItem('uid')\n    };\n\n    if (this.checkAuthData(authData)) {\n      this.authData.next(authData);\n    }\n  }\n\n  // Try to get auth data from url parameters.\n  private getAuthDataFromParams(): void {\n    this.activatedRoute.queryParams.subscribe(queryParams => {\n      const authData: AuthData = {\n        accessToken:    queryParams['token'] || queryParams['auth_token'],\n        client:         queryParams['client_id'],\n        expiry:         queryParams['expiry'],\n        tokenType:      'Bearer',\n        uid:            queryParams['uid']\n      };\n\n      if (this.checkAuthData(authData)) {\n        this.authData.next(authData);\n      }\n    });\n  }\n\n  /**\n   *\n   * Set Auth Data\n   *\n   */\n\n  // Write auth data to storage\n  private setAuthData(authData: AuthData): void {\n    if (this.checkAuthData(authData)) {\n\n      this.authData.next(authData);\n\n      this.localStorage.setItem('accessToken', authData.accessToken);\n      this.localStorage.setItem('client', authData.client);\n      this.localStorage.setItem('expiry', authData.expiry);\n      this.localStorage.setItem('tokenType', authData.tokenType);\n      this.localStorage.setItem('uid', authData.uid);\n\n      if (this.userType.value != null) {\n        this.localStorage.setItem('userType', this.userType.value.name);\n      }\n\n    }\n  }\n\n\n  /**\n   *\n   * Validate Auth Data\n   *\n   */\n\n  // Check if auth data complete and if response token is newer\n  private checkAuthData(authData: AuthData): boolean {\n\n    if (\n      authData.accessToken != null &&\n      authData.client != null &&\n      authData.expiry != null &&\n      authData.tokenType != null &&\n      authData.uid != null\n    ) {\n      if (this.authData.value != null) {\n        return authData.expiry >= this.authData.value.expiry;\n      }\n      return true;\n    }\n    return false;\n  }\n\n\n  /**\n   *\n   * OAuth\n   *\n   */\n\n  private requestCredentialsViaPostMessage(authWindow: any): Observable<any> {\n    const pollerObserv = interval(500);\n\n    const responseObserv = fromEvent(this.global, 'message').pipe(\n      pluck('data'),\n      filter(this.oAuthWindowResponseFilter)\n    );\n\n    responseObserv.subscribe(\n      this.getAuthDataFromPostMessage.bind(this)\n    );\n\n    const pollerSubscription = pollerObserv.subscribe(() => {\n      if (authWindow.closed) {\n        pollerSubscription.unsubscribe();\n      } else {\n        authWindow.postMessage('requestCredentials', '*');\n      }\n    });\n\n    return responseObserv;\n  }\n\n  private oAuthWindowResponseFilter(data: any): any {\n    if (data.message === 'deliverCredentials' || data.message === 'authFailure') {\n      return data;\n    }\n  }\n\n\n  /**\n   *\n   * Utilities\n   *\n   */\n\n  // Match user config by user config name\n  private getUserTypeByName(name: string): UserType {\n    if (name == null || this.options.userTypes == null) {\n      return null;\n    }\n\n    return this.options.userTypes.find(\n      userType => userType.name === name\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpRequest, HttpInterceptor, HttpHandler, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { AngularTokenService } from './angular-token.service';\n\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class AngularTokenInterceptor implements HttpInterceptor {\n\n  constructor( private tokenService: AngularTokenService ) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    // Get auth data from local storage\n    this.tokenService.getAuthDataFromStorage();\n\n    // Add the headers if the request is going to the configured server\n    const authData = this.tokenService.authData.value;\n\n    if (authData &&\n      (this.tokenService.tokenOptions.apiBase === null || req.url.match(this.tokenService.tokenOptions.apiBase))) {\n\n      const headers = {\n        'access-token': authData.accessToken,\n        'client':       authData.client,\n        'expiry':       authData.expiry,\n        'token-type':   authData.tokenType,\n        'uid':          authData.uid\n      };\n\n      req = req.clone({\n        setHeaders: headers\n      });\n    }\n\n    return next.handle(req).pipe(tap(\n        res => this.handleResponse(res),\n        err => this.handleResponse(err)\n    ));\n  }\n\n\n  // Parse Auth data from response\n  private handleResponse(res: HttpResponse<any> | HttpErrorResponse | HttpEvent<any>): void {\n    if (res instanceof HttpResponse || res instanceof HttpErrorResponse) {\n      if (this.tokenService.tokenOptions.apiBase === null || (res.url && res.url.match(this.tokenService.tokenOptions.apiBase))) {\n        this.tokenService.getAuthHeadersFromResponse(res);\n      }\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, Optional, SkipSelf } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AngularTokenOptions } from './angular-token.model';\nimport { AngularTokenService } from './angular-token.service';\nimport { AngularTokenInterceptor } from './angular-token.interceptor';\nimport { ANGULAR_TOKEN_OPTIONS } from './angular-token.token';\n\nexport * from './angular-token.service';\n\n@NgModule()\nexport class AngularTokenModule {\n\n  constructor(@Optional() @SkipSelf() parentModule: AngularTokenModule) {\n    if (parentModule) {\n      throw new Error('AngularToken is already loaded. It should only be imported in your application\\'s main module.');\n    }\n  }\n  static forRoot(options: AngularTokenOptions): ModuleWithProviders {\n    return {\n      ngModule: AngularTokenModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: AngularTokenInterceptor,\n          multi: true\n        },\n        options.angularTokenOptionsProvider ||\n        {\n          provide: ANGULAR_TOKEN_OPTIONS,\n          useValue: options\n        },\n        AngularTokenService\n      ]\n    };\n  }\n}\n"]}